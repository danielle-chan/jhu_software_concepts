
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: applicants
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d applicants"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "5672:5672"
      - "15672:15672"

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: applicants
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: "5432"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/%2F"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"

  worker:
    build:
      context: ./worker
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: applicants
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: "5432"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/%2F"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
      - ./db:/app/db:ro

  init_loader:               # one-shot data load on startup
    build:
      context: ./worker      # reuse worker image (Python + deps)
    command: ["python", "/app/db/load_data.py"]
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: applicants
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: "5432"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
      - ./db:/app/db:ro
    restart: "no"

volumes:
  pgdata:
