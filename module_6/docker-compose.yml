services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: applicants
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/00_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d applicants"]
      interval: 5s
      timeout: 3s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      FLASK_APP: run.py
      FLASK_ENV: development
      POSTGRES_HOST: db
      POSTGRES_DB: applicants
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: "5432"
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: "5672"
      RABBIT_USER: guest
      RABBIT_PASS: guest
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: applicants
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: "5432"
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: "5672"
      RABBIT_USER: guest
      RABBIT_PASS: guest
      # Your dataset is full_out.jsonl (not applicant_data.json) â€” set it explicitly:
      DATA_FILE: /app/data/full_out.jsonl
    volumes:
      - ./data:/app/data:ro
      - ./db:/app/db:ro
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  pgdata:
