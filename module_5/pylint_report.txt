************* Module src.load_data
src/load_data.py:6:24: C0303: Trailing whitespace (trailing-whitespace)
src/load_data.py:7:24: C0303: Trailing whitespace (trailing-whitespace)
src/load_data.py:52:0: C0304: Final newline missing (missing-final-newline)
src/load_data.py:1:0: C0114: Missing module docstring (missing-module-docstring)
src/load_data.py:11:6: E1101: Class 'value' has no 'cursor' member (no-member)
src/load_data.py:16:5: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
src/load_data.py:21:8: C0116: Missing function or method docstring (missing-function-docstring)
src/load_data.py:50:0: E1101: Class 'value' has no 'commit' member (no-member)
src/load_data.py:52:0: E1101: Class 'value' has no 'close' member (no-member)
src/load_data.py:2:0: C0411: standard import "json" should be placed before third party import "psycopg" (wrong-import-order)
************* Module src.query_data
src/query_data.py:5:24: C0303: Trailing whitespace (trailing-whitespace)
src/query_data.py:6:24: C0303: Trailing whitespace (trailing-whitespace)
src/query_data.py:29:0: C0301: Line too long (141/100) (line-too-long)
src/query_data.py:51:69: C0303: Trailing whitespace (trailing-whitespace)
src/query_data.py:94:0: C0301: Line too long (133/100) (line-too-long)
src/query_data.py:173:0: C0304: Final newline missing (missing-final-newline)
src/query_data.py:1:0: C0114: Missing module docstring (missing-module-docstring)
src/query_data.py:10:6: E1101: Class 'value' has no 'cursor' member (no-member)
src/query_data.py:173:0: E1101: Class 'value' has no 'close' member (no-member)
************* Module src.scrape
src/scrape.py:55:0: C0301: Line too long (140/100) (line-too-long)
src/scrape.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
src/scrape.py:73:0: C0301: Line too long (103/100) (line-too-long)
src/scrape.py:109:0: C0304: Final newline missing (missing-final-newline)
src/scrape.py:1:0: C0114: Missing module docstring (missing-module-docstring)
src/scrape.py:6:0: C0116: Missing function or method docstring (missing-function-docstring)
src/scrape.py:6:0: R0914: Too many local variables (34/15) (too-many-locals)
src/scrape.py:93:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
src/scrape.py:6:0: R0912: Too many branches (22/12) (too-many-branches)
src/scrape.py:6:0: R0915: Too many statements (57/50) (too-many-statements)
src/scrape.py:15:15: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
src/scrape.py:3:0: C0411: standard import "urllib.request.urlopen" should be placed before third party import "bs4.BeautifulSoup" (wrong-import-order)
src/scrape.py:1:0: R0801: Similar lines in 2 files
==src.query_data:[38:166]
==src.run:[50:185]
        FROM applicants
    """)

    avg_gpa, avg_gre, avg_gre_v, avg_gre_aw = cur.fetchone()


    # 4. Average GPA of American students
    cur.execute("""
        SELECT AVG(gpa) AS avg_gpa
        FROM applicants
        WHERE term = 'Fall 2025'
        AND us_or_international = 'American'
        AND gpa IS NOT NULL;
    """)

    avg_gpa_american = cur.fetchone()[0]


    # 5. Percent acceptences for Fall 2025
    cur.execute("""
        SELECT
            100.0 * COUNT(*) FILTER (WHERE status ILIKE 'Accepted%') / COUNT(*)
        FROM applicants
        WHERE term = 'Fall 2025'
    """)

    percent_acceptances = cur.fetchone()[0]


    # 6. Average GPA of acceptances from Fall 2025
    cur.execute("""
        SELECT AVG(gpa) AS avg_gpa_fall2025_acceptances
        FROM applicants
        WHERE term = 'Fall 2025'
        AND status ILIKE '%Accepted%'
        AND gpa IS NOT NULL;
    """)

    avg_gpa_accepted = cur.fetchone()[0]


    # 7. Applicants who applied to JHU for master's in CS
    cur.execute("""
        SELECT COUNT(*)
        FROM applicants
        WHERE (
            llm_generated_university ILIKE '%Johns Hopkins%'
            OR llm_generated_university ILIKE '%JHU%'
            OR llm_generated_university ILIKE '%Hopkins%'
        )
        AND (
            llm_generated_program ILIKE '%Computer Science%'
        )
        AND (
            degree ILIKE '%Master%'
            OR degree ILIKE '%MS%'
            OR degree ILIKE '%M.S.%'
            OR degree ILIKE '%Masters%'
        );
    """)

    jhu_apps = cur.fetchone()[0]


    # 8. 2025 applicants who applied to Georgwtown for PhD in CS
    cur.execute("""
        SELECT COUNT(*)
        FROM applicants
        WHERE
            term ILIKE '%2025%'
            AND status ILIKE '%Accept%'
            AND (
                llm_generated_university ILIKE '%Georgetown%'
            )
            AND (
                degree ILIKE '%PhD%'
                OR degree ILIKE '%Ph.D.%'
                OR degree ILIKE '%Doctorate%'
            )
            AND (
                llm_generated_program ILIKE '%Computer Science%'
            );
    """)

    gtown_apps = cur.fetchone()[0]

    # 9. Fall 2025 data science applicants
    cur.execute("""
    SELECT COUNT(*)
        FROM applicants
        WHERE
            term ILIKE '%Fall 2025%'
            AND (
                llm_generated_program ILIKE '%Data Science%'
            );
    """)

    ds_apps = cur.fetchone()[0]

    # 10. Number of applicants who submitted a GRE score
    cur.execute("""
        SELECT COUNT(*)
        FROM applicants
        WHERE gre IS NOT NULL
            OR gre_v IS NOT NULL
            OR gre_aw IS NOT NULL;
    """)

    count_gre = cur.fetchone()[0]

    cur.close()
    conn.close()

    return render_template(
        'index.html',
        count=count,
        percent_international=percent_international,
        avg_gpa=avg_gpa,
        avg_gre=avg_gre,
        avg_gre_v=avg_gre_v,
        avg_gre_aw=avg_gre_aw,
        avg_gpa_american=avg_gpa_american,
        percent_acceptances=percent_acceptances,
        avg_gpa_accepted=avg_gpa_accepted,
        jhu_apps=jhu_apps,
        gtown_apps=gtown_apps,
        ds_apps=ds_apps,
        count_gre=count_gre
    )


@app.route('/pull_data')
def pull_data():
    """Scrape, clean, standardize , append new data"""
    # 1. Scrape raw data (duplicate-code)
src/scrape.py:1:0: R0801: Similar lines in 2 files
==src.append_data:[16:29]
==src.load_data:[16:30]
    for line in f:
        entry = json.loads(line)

        # Replace "N/A" with None for nullable fields
        def clean_val(v):
            return None if v in ("N/A", "", None) else v

        cur.execute("""
            INSERT INTO applicants (
                program, degree, comments, date_added, status, url,
                gpa, gre, gre_v, gre_aw, term, us_or_international,
                llm_generated_program, llm_generated_university, university
            )
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 7.70/10 (previous run: 7.65/10, +0.04)

